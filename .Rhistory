census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
select(-ends_with("M")) %>%
sf_use_s2(F) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary)
?sf_use_s2
sf_use_s2(F)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary)
sf_use_s2(T)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary)
?poly2nb
??poly2nb
census
st_crs(census)
st_crs(PDX_boundary)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
st_transform(4326) %>%
st_transform(4269) %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary)
?poly2nb
??poly2nb
temporary_file <- tempfile()
temporary_file_2 <- tempfile()
download.file("https://opendata.arcgis.com/api/v3/datasets/951488174bfe4275bbbd04421d7820f5_10/downloads/data?format=shp&spatialRefId=3857&where=1%3D1", temporary_file)
unzip(temporary_file, exdir = temporary_file_2)
PDX_boundary <- st_read(paste0(temporary_file_2, "/City_Boundaries.shp"))[35,] %>%
st_transform(4269) %>%
st_make_valid()
unlink(temporary_file)
unlink(temporary_file_2)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
st_make_valid() %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
st_make_valid() %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary) %>%
mutate(modified_area = st_area(geometry) %>% as.numeric(),
pct_area_remaining = modified_area / initial_area,
housingunitsE = round(housingunitsE*pct_area_remaining) )
View(census)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
st_make_valid() %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary) %>%
mutate(modified_area = st_area(geometry) %>% as.numeric(),
pct_area_remaining = modified_area / initial_area,
housingunitsE = round(housingunitsE*pct_area_remaining) ) %>%
select(-c(GEOID, NAME, initial_area, CITYNAME, Shape_Leng, Shape_Area, AREA, modified_area, pct_area_remaining))
View(census)
## Importing census information for counties
## ============================================================================
county_census <- get_acs(geography = "county",
state="OR",
year = 2022,
variables= c(medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
geometry = F,
output = "wide") %>%
mutate(County2 = str_extract(NAME, "([:alpha:]*\\s?[:alpha:]*)\\sCounty", group = 1)) %>%
select(-ends_with("M"), -NAME, -GEOID)
library(stringr)
## Importing census information for counties
## ============================================================================
county_census <- get_acs(geography = "county",
state="OR",
year = 2022,
variables= c(medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
geometry = F,
output = "wide") %>%
mutate(County2 = str_extract(NAME, "([:alpha:]*\\s?[:alpha:]*)\\sCounty", group = 1)) %>%
select(-ends_with("M"), -NAME, -GEOID)
View(county_census)
## Importing census information for counties
## ============================================================================
county_census <- get_acs(geography = "county",
state="OR",
year = 2022,
variables= c(medianhomevalue_c = "B25077_001",
medianrent_c = "B25058_001"),
geometry = F,
output = "wide") %>%
mutate(County2 = str_extract(NAME, "([:alpha:]*\\s?[:alpha:]*)\\sCounty", group = 1)) %>%
select(-ends_with("M"), -NAME, -GEOID)
## Importing census information for block groups
## ============================================================================
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
mutate(County1 = str_extract(NAME, "\\s([:alpha:]*)\\sCounty", group = 1)) %>%
st_make_valid() %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary) %>%
mutate(modified_area = st_area(geometry) %>% as.numeric(),
pct_area_remaining = modified_area / initial_area,
housingunitsE = round(housingunitsE*pct_area_remaining) ) %>%
select(-c(GEOID, NAME, initial_area, CITYNAME, Shape_Leng, Shape_Area, AREA,
modified_area, pct_area_remaining, OBJECTID))
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(county1 ==county2))
View(census)
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(County1 == County2))
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) )
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE))
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".")
## Filling in missing values with county values
## ============================================================================
imputed_census <- left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE))
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".")
View(census_final)
## Filling in missing values with county values
## ============================================================================
imputed_census <- left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE, County1))
## Filling in missing values with county values
## ============================================================================
imputed_census <- left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE, County1))
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".") %>%
st_drop_geometry()
View(census_final)
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".") %>%
select(-geometry)
## Pairs
pairs(census_final)
## Pairs
pairs(census_final %>% mutate(listings_num = log(listings_num)))
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3)
View(listings)
pairs(listings)
listings$price
listings$price %>% as.numeric()
?gsub
listings$price %>% gsub("$", "", .)
listings$price %>% gsub("$", "", .)
gsub("$", "", listings$price)
sub("$", "", listings$price)
sub("$", "", listings$price, fixed = T)
sub("$", "", listings$price, fixed = T) %>% as.numeric()
listings$price
listings %>% select(beds, bathrooms, room_type, price)
listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric() )
listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) )
listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) ) %>% pairs()
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) ) %>% pairs()
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) )
plot(easy_temp$beds, easy_temp$price)
plot(easy_temp$bathrooms, easy_temp$price)
plot(easy_temp$room_type, easy_temp$price)
plot(easy_temp$room_type, easy_temp$price)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999), room_type = factor(room_type) )
plot(easy_temp$room_type, easy_temp$price)
View(easy_temp)
plot(easy_temp$bathrooms, easy_temp$price)
plot(log(easy_temp$bathrooms), easy_temp$price)
plot(easy_temp$beds, easy_temp$price)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type) )
View(census_final)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type), distance = st_distance(geometry, Pioneer_Square) )
View(easy_temp)
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type), distance = st_distance(geometry, Pioneer_Square) )
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type), distance = st_distance(geometry, Pioneer_Square) %>% as.numeric() )
plot(easy_temp$distance, easy_temp$price)
plot(easy_temp$distance, easy_temp$price)
abline(easy_temp$distance, easy_temp$price)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(),
room_type = factor(room_type),
distance = st_distance(geometry, Pioneer_Square) %>% as.numeric() ) %>%
st_drop_geometry() %>%
na.omit()
plot(easy_temp$distance, easy_temp$price)
abline(easy_temp$distance, easy_temp$price)
plot(easy_temp$distance, easy_temp$price)
abline(easy_temp$distance, easy_temp$price)
plot(easy_temp$distance, easy_temp$price)
abline(lm(easy_temp$distance, easy_temp$price))
plot(easy_temp$distance, easy_temp$price)
abline(lm(easy_temp$price ~ easy_temp$distance))
plot(easy_temp$beds, easy_temp$price)
abline(lm(easy_temp$price ~ easy_temp$beds))
plot(easy_temp$bathrooms, easy_temp$price)
abline(lm(easy_temp$price ~ easy_temp$bathrooms))
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Importing City of Portland boundaries
## ============================================================================
# temporary_file <- tempfile()
# temporary_file_2 <- tempfile()
# download.file("https://opendata.arcgis.com/api/v3/datasets/951488174bfe4275bbbd04421d7820f5_10/downloads/data?format=shp&spatialRefId=3857&where=1%3D1", temporary_file)
# unzip(temporary_file, exdir = temporary_file_2)
# PDX_boundary <- st_read(paste0(temporary_file_2, "/City_Boundaries.shp"))[35,] %>%
#   st_transform(4269) %>%
#   st_make_valid()
# unlink(temporary_file)
# unlink(temporary_file_2)
## Importing listing data
## ============================================================================
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3) %>% select(latitude, longitude) %>% st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
st_transform(4269)
unlink(temporary_file)
View(listings)
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Creating point representing Pioneer Square as a rough measure of the city
## center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## Importing listing data, wrangling data into appropriate format
## ============================================================================
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
st_transform(4269) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Creating point representing Pioneer Square as a rough measure of the city
## center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## Importing listing data, wrangling data into appropriate format
## ============================================================================
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
unlink(temporary_file)
unlink(temporary_file_3)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings <- read.csv(temporary_file_3) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
unlink(temporary_file)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings <- read.csv(temporary_file) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
unlink(temporary_file)
## Visually exploring data
## ============================================================================
mapview(listings)
View(listings)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326)
unlink(temporary_file)
## Visually exploring data
## ============================================================================
mapview(listings)
## Visually exploring data
## ============================================================================
mapview(listings_spatial)
## Wrangling data further to extract neccesary variables
## ============================================================================
listings_spatial %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
## Wrangling data further to extract neccesary variables
## ============================================================================
listings <- listings_spatial %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
pairs(listings)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file)
View(listings_spatial)
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Creating point representing Pioneer Courthouse Square as a rough measure of
## the city center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## Importing listing data, changing to spatial data format
## ============================================================================
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file) %>%
filter(number_of_reviews_ltm > 0) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326)
unlink(temporary_file)
## Visually exploring data
## ============================================================================
mapview(listings_spatial)
## Wrangling data further to extract neccesary variables
## ============================================================================
listings <- listings_spatial %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
## Exploring data further
## ============================================================================
pairs(listings)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file)
View(listings_spatial)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_raw <- read.csv(temporary_file)
unlink(temporary_file)
## First round of data exploration
temporary_file
