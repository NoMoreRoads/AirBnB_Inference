pct_area_remaining = modified_area / initial_area,
housingunitsE = round(housingunitsE*pct_area_remaining) )
View(census)
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
st_make_valid() %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary) %>%
mutate(modified_area = st_area(geometry) %>% as.numeric(),
pct_area_remaining = modified_area / initial_area,
housingunitsE = round(housingunitsE*pct_area_remaining) ) %>%
select(-c(GEOID, NAME, initial_area, CITYNAME, Shape_Leng, Shape_Area, AREA, modified_area, pct_area_remaining))
View(census)
## Importing census information for counties
## ============================================================================
county_census <- get_acs(geography = "county",
state="OR",
year = 2022,
variables= c(medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
geometry = F,
output = "wide") %>%
mutate(County2 = str_extract(NAME, "([:alpha:]*\\s?[:alpha:]*)\\sCounty", group = 1)) %>%
select(-ends_with("M"), -NAME, -GEOID)
library(stringr)
## Importing census information for counties
## ============================================================================
county_census <- get_acs(geography = "county",
state="OR",
year = 2022,
variables= c(medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
geometry = F,
output = "wide") %>%
mutate(County2 = str_extract(NAME, "([:alpha:]*\\s?[:alpha:]*)\\sCounty", group = 1)) %>%
select(-ends_with("M"), -NAME, -GEOID)
View(county_census)
## Importing census information for counties
## ============================================================================
county_census <- get_acs(geography = "county",
state="OR",
year = 2022,
variables= c(medianhomevalue_c = "B25077_001",
medianrent_c = "B25058_001"),
geometry = F,
output = "wide") %>%
mutate(County2 = str_extract(NAME, "([:alpha:]*\\s?[:alpha:]*)\\sCounty", group = 1)) %>%
select(-ends_with("M"), -NAME, -GEOID)
## Importing census information for block groups
## ============================================================================
census <- get_acs(geography = "cbg",
variables = c(housingunits = "B25001_001",
medianhomevalue = "B25077_001",
medianrent = "B25058_001"),
state = "OR",
year = 2022,
output = "wide",
survey = "acs5",
geometry = T) %>%
mutate(County1 = str_extract(NAME, "\\s([:alpha:]*)\\sCounty", group = 1)) %>%
st_make_valid() %>%
select(-ends_with("M")) %>%
mutate(initial_area = st_area(geometry) %>% as.numeric()) %>%
st_intersection(., PDX_boundary) %>%
mutate(modified_area = st_area(geometry) %>% as.numeric(),
pct_area_remaining = modified_area / initial_area,
housingunitsE = round(housingunitsE*pct_area_remaining) ) %>%
select(-c(GEOID, NAME, initial_area, CITYNAME, Shape_Leng, Shape_Area, AREA,
modified_area, pct_area_remaining, OBJECTID))
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(county1 ==county2))
View(census)
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(County1 == County2))
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) )
## Filling in missing values with county values
## ============================================================================
left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE))
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".")
## Filling in missing values with county values
## ============================================================================
imputed_census <- left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE))
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".")
View(census_final)
## Filling in missing values with county values
## ============================================================================
imputed_census <- left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE, County1))
## Filling in missing values with county values
## ============================================================================
imputed_census <- left_join(census, county_census, by = join_by(County1 == County2)) %>%
mutate(medianhomevalueE = coalesce(medianhomevalueE, medianhomevalue_cE),
medianrentE = coalesce(medianrentE, medianrent_cE) ) %>%
select(-c(medianhomevalue_cE, medianrent_cE, County1))
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".") %>%
st_drop_geometry()
View(census_final)
## Counting listings by block group
## ============================================================================
census_final <- st_intersects(imputed_census, listings) %>%
lapply(., length) %>%
unlist() %>%
cbind.data.frame(., imputed_census) %>%
rename(listings_num = ".") %>%
select(-geometry)
## Pairs
pairs(census_final)
## Pairs
pairs(census_final %>% mutate(listings_num = log(listings_num)))
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3)
View(listings)
pairs(listings)
listings$price
listings$price %>% as.numeric()
?gsub
listings$price %>% gsub("$", "", .)
listings$price %>% gsub("$", "", .)
gsub("$", "", listings$price)
sub("$", "", listings$price)
sub("$", "", listings$price, fixed = T)
sub("$", "", listings$price, fixed = T) %>% as.numeric()
listings$price
listings %>% select(beds, bathrooms, room_type, price)
listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric() )
listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) )
listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) ) %>% pairs()
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) ) %>% pairs()
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999) )
plot(easy_temp$beds, easy_temp$price)
plot(easy_temp$bathrooms, easy_temp$price)
plot(easy_temp$room_type, easy_temp$price)
plot(easy_temp$room_type, easy_temp$price)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), price = na_if(price, 999), room_type = factor(room_type) )
plot(easy_temp$room_type, easy_temp$price)
View(easy_temp)
plot(easy_temp$bathrooms, easy_temp$price)
plot(log(easy_temp$bathrooms), easy_temp$price)
plot(easy_temp$beds, easy_temp$price)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price) %>% mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type) )
View(census_final)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type), distance = st_distance(geometry, Pioneer_Square) )
View(easy_temp)
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type), distance = st_distance(geometry, Pioneer_Square) )
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(), room_type = factor(room_type), distance = st_distance(geometry, Pioneer_Square) %>% as.numeric() )
plot(easy_temp$distance, easy_temp$price)
plot(easy_temp$distance, easy_temp$price)
abline(easy_temp$distance, easy_temp$price)
easy_temp <- listings %>% select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = sub("$", "", price, fixed = T) %>% as.numeric(),
room_type = factor(room_type),
distance = st_distance(geometry, Pioneer_Square) %>% as.numeric() ) %>%
st_drop_geometry() %>%
na.omit()
plot(easy_temp$distance, easy_temp$price)
abline(easy_temp$distance, easy_temp$price)
plot(easy_temp$distance, easy_temp$price)
abline(easy_temp$distance, easy_temp$price)
plot(easy_temp$distance, easy_temp$price)
abline(lm(easy_temp$distance, easy_temp$price))
plot(easy_temp$distance, easy_temp$price)
abline(lm(easy_temp$price ~ easy_temp$distance))
plot(easy_temp$beds, easy_temp$price)
abline(lm(easy_temp$price ~ easy_temp$beds))
plot(easy_temp$bathrooms, easy_temp$price)
abline(lm(easy_temp$price ~ easy_temp$bathrooms))
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Importing City of Portland boundaries
## ============================================================================
# temporary_file <- tempfile()
# temporary_file_2 <- tempfile()
# download.file("https://opendata.arcgis.com/api/v3/datasets/951488174bfe4275bbbd04421d7820f5_10/downloads/data?format=shp&spatialRefId=3857&where=1%3D1", temporary_file)
# unzip(temporary_file, exdir = temporary_file_2)
# PDX_boundary <- st_read(paste0(temporary_file_2, "/City_Boundaries.shp"))[35,] %>%
#   st_transform(4269) %>%
#   st_make_valid()
# unlink(temporary_file)
# unlink(temporary_file_2)
## Importing listing data
## ============================================================================
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3) %>% select(latitude, longitude) %>% st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
st_transform(4269)
unlink(temporary_file)
View(listings)
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Creating point representing Pioneer Square as a rough measure of the city
## center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## Importing listing data, wrangling data into appropriate format
## ============================================================================
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
st_transform(4269) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Creating point representing Pioneer Square as a rough measure of the city
## center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## Importing listing data, wrangling data into appropriate format
## ============================================================================
temporary_file_3 <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file_3)
listings <- read.csv(temporary_file_3) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
unlink(temporary_file)
unlink(temporary_file_3)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings <- read.csv(temporary_file_3) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
unlink(temporary_file)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings <- read.csv(temporary_file) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
unlink(temporary_file)
## Visually exploring data
## ============================================================================
mapview(listings)
View(listings)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326)
unlink(temporary_file)
## Visually exploring data
## ============================================================================
mapview(listings)
## Visually exploring data
## ============================================================================
mapview(listings_spatial)
## Wrangling data further to extract neccesary variables
## ============================================================================
listings_spatial %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
## Wrangling data further to extract neccesary variables
## ============================================================================
listings <- listings_spatial %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
pairs(listings)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file)
View(listings_spatial)
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(stringr)
## Creating point representing Pioneer Courthouse Square as a rough measure of
## the city center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## Importing listing data, changing to spatial data format
## ============================================================================
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file) %>%
filter(number_of_reviews_ltm > 0) %>%
select(beds, bathrooms, room_type, price, longitude, latitude) %>%
st_as_sf(., coords = c("longitude", "latitude")) %>%
st_set_crs(4326)
unlink(temporary_file)
## Visually exploring data
## ============================================================================
mapview(listings_spatial)
## Wrangling data further to extract neccesary variables
## ============================================================================
listings <- listings_spatial %>%
mutate(price = as.numeric(sub("$", "", price, fixed = T)),
room_type = factor(room_type),
distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
st_drop_geometry() %>%
na.omit()
## Exploring data further
## ============================================================================
pairs(listings)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_spatial <- read.csv(temporary_file)
View(listings_spatial)
temporary_file <- tempfile()
download.file("https://data.insideairbnb.com/united-states/or/portland/2024-03-16/data/listings.csv.gz", temporary_file)
listings_raw <- read.csv(temporary_file)
unlink(temporary_file)
## First round of data exploration
temporary_file
## Importing libraries
## ============================================================================
library(dplyr)
library(sf)
library(stringr)
library(stringi)
library(mapview)
## Importing listing data, changing to spatial data format
## ============================================================================
listings_raw <- read.csv("listings.csv")
## Creating point representing Pioneer Courthouse Square as a rough measure of
## the city center
## ============================================================================
Pioneer_Square <- data.frame(45.5188803,-122.6818477) %>%
st_as_sf(., coords = c("X.122.6818477","X45.5188803")) %>%
st_set_crs(., 4326)
## First round of data exploration
## ============================================================================
# Checking raw data
listings_raw
# Focusing on entire units being rented, as comparability between different
# room types is likely out of the scope of this inference
listings_2 <- listings_raw %>% filter(room_type == "Entire home/apt")
# Checking for multicolinearity between bedrooms and bathrooms using R squared
lm(data = listings_2, formula = bedrooms ~ bathrooms) %>%
summary()
# Imputing missing bathroom values using bathrooms_text column
listings_2$bathrooms_text %>% unique()
listings_3 <- listings_2 %>% mutate(bathrooms = case_when(
is.na(bathrooms) & bathrooms_text == "Half-bath" ~ .5,
is.na(bathrooms) & bathrooms_text != "Half-bath" ~ as.numeric(str_extract(bathrooms_text, "\\d+.?\\d?")),
.default = bathrooms
) )
# Imputing missing bathrooms using the "accommodates" and bathrooms variables
lm(data = listings_3, formula = bedrooms ~ accommodates) %>%
summary()
bed_impute_df <- listings_3 %>% group_by(accommodates, bathrooms) %>%
summarise(med_bed = median(bedrooms, na.rm = T))
listings_4 <- left_join(listings_3, bed_impute_df, by = join_by(accommodates == accommodates, bathrooms == bathrooms) ) %>%
mutate(bedrooms = coalesce(bedrooms, med_bed))
# Checking histograms of bedrooms, bathrooms, accommodates
hist(listings_4$bedrooms)
hist(listings_4$bathrooms)
hist(listings_4$accommodates)
# Extracting the price variable from its text format
listings_5 <- listings_4 %>% filter(!is.na(price) & price != "") %>%
mutate(price = as.numeric(stri_replace_all_regex(price,
pattern = c("\\$", "\\,"),
replacement = c("",""),
vectorize = F)) )
# Filtering out apparently inactive or inaccurate listings, removing most
# variables
listings_6 <- listings_5 %>% filter(number_of_reviews_l30d > 0,
review_scores_accuracy >= 3) %>%
select(longitude, latitude, property_type, accommodates, bathrooms,
bedrooms, price) %>% mutate(property_type = as.factor(property_type))
# Plotting home type against price to see if it is worth keeping
plot(listings_6$property_type, listings_6$price)
# Computing distance from city center, removing property type
listings_7 <- st_as_sf(listings_6, coords = c("longitude", "latitude")) %>%
st_set_crs(4326) %>%
mutate(distance = as.numeric(st_distance(geometry, Pioneer_Square)) ) %>%
select(-property_type)
# Spatially visualize listings, spot check distance variable
mapview(listings_7, zcol = "distance")
# Remove geometry from data frame
listings_8 <- st_drop_geometry(listings_7)
## Exploration with reduced data set
## ============================================================================
pairs(listings_8)
for (i in 1:ncol(listings_8)) {
graphics::hist(listings_8[,i], xlab = names(listings_8)[i],
main = paste("Histogram of", names(listings_8)[i]))
}
## Checking assumptions for linear regression
## ============================================================================
# Checking that residuals are normally distributed
lm(data = listings_8, formula = price ~ .) %>% plot()
# Removing accommodates because it is multicollinear with bedrooms
listings_9 <- listings_8 %>% select(-accommodates)
# Checking normality of residuals again
lm(data = listings_9, formula = price ~ .) %>% plot()
# Checking homoscedacity
lm(data = listings_9, formula = price ~ .) %>% plot()
## Model fitting
## ============================================================================
mod1 <- lm(data = listings_9, formula = log(price) ~ .) %>% summary()
point_est <- exp(mod1$coefficients[4,1])
upper_bound <- exp(mod1$coefficients[4,1] - (mod1$coefficients[4,1] * 1.96))
lower_bound <- exp(mod1$coefficients[4,1] + (mod1$coefficients[4,1] * 1.96))
point_est
lower_bound
upper_bound
# With 95% confidence, a 1 meter increase of a full-unit AirBnB listing's
# distance from Pioneer Courthouse Square is associated with between a
# $0.0000518 decrease and a $0.0000168 increase in the price of the listing,
# when accounting for the number of bedrooms and bathrooms.
